@using Meteor.VehicleTool.Vehicle
@using System;
@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent
@namespace Sandbox

<root class="@(Visible ? "" : "hidden")">
	<div class="speedometer">
		<div class="speedgear">
			<div class="speed">
				@{
					var str = Math.Round(vehicleComponent.CurrentSpeed.MeterToInch() * VEL_TO_KMH).ToString("000");
					var clr = "#333";
					@for (int i = 0; i < 3; ++i)
					{
						var s = str[i];
						if (s != '0')
						{
							clr = "#fff";
						}
						<label class="speedchar" style="color: @clr">@s</label>
					}
				}
			</div>
			<div class="gear">
				@{
					if (vehicleComponent.Transmission.Gear == 0)
					{
						<label>N</label>
					}
					else if (vehicleComponent.Transmission.Gear == -1)
					{
						<label>R</label>
					}
					else
					{
						<label>@vehicleComponent.Transmission.Gear</label>
					}
				}
			</div>
		</div>
		<div class="throttle-container">
			<div class="inner" style="width: @(Math.Abs(vehicleComponent.VerticalInput) * 100)%" />
		</div>
	</div>
</root>

@code
{
	public bool Visible => suit.User.IsValid() && Network.IsOwner;

	private static float VEL_TO_KMH = 0.06858f;
	[Property] private VehicleController vehicleComponent;
	[Property] private SuitableVehicle suit;

	protected override void OnAwake()
	{
		suit ??= Components.Get<SuitableVehicle>(FindMode.InAncestors);
		vehicleComponent ??= Components.Get<VehicleController>(FindMode.InAncestors);
	}


	protected override int BuildHash() => System.HashCode.Combine(Visible, vehicleComponent.CurrentSpeed, vehicleComponent.VerticalInput);
}
